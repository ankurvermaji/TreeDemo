package tree;

//Java program for different tree traversals 

/* Class containing left and right child of current 
Noded and key value*/
class Noded 
{ 
	int key; 
	Noded left, right; 

	public Noded(int item) 
	{ 
		key = item; 
		left = right = null; 
	} 
} 

class TreeDemo1 
{ 
	// Root of Binary Tree 
	Noded root; 

	TreeDemo1() 
	{ 
		root = null; 
	} 

	/* Given a binary tree, print its Nodeds according to the 
	"bottom-up" postorder traversal. */
	void printPostorder(Noded Noded) 
	{ 
		if (Noded == null) 
			return; 

		// first recur on left subtree 
		printPostorder(Noded.left); 

		// then recur on right subtree 
		printPostorder(Noded.right); 

		// now deal with the Noded 
		System.out.print(Noded.key + " "); 
	} 

	/* Given a binary tree, print its Nodeds in inorder*/
	void printInorder(Noded Noded) 
	{ 
		if (Noded == null) 
			return; 

		/* first recur on left child */
		printInorder(Noded.left); 

		/* then print the data of Noded */
		System.out.print(Noded.key + " "); 

		/* now recur on right child */
		printInorder(Noded.right); 
	} 

	/* Given a binary tree, print its Nodeds in preorder*/
	void printPreorder(Noded Noded) 
	{ 
		if (Noded == null) 
			return; 

		/* first print data of Noded */
		System.out.print(Noded.key + " "); 

		/* then recur on left sutree */
		printPreorder(Noded.left); 

		/* now recur on right subtree */
		printPreorder(Noded.right); 
	} 

	// Wrappers over above recursive functions 
	void printPostorder() {	 printPostorder(root); } 
	void printInorder() {	 printInorder(root); } 
	void printPreorder() {	 printPreorder(root); } 

	// Driver method 
	public static void main(String[] args) 
	{ 
		TreeDemo1 tree = new TreeDemo1(); 
		tree.root = new Noded(1); 
		tree.root.left = new Noded(2); 
		tree.root.right = new Noded(3); 
		tree.root.left.left = new Noded(4); 
		tree.root.left.right = new Noded(5); 

		System.out.println("Preorder traversal of binary tree is "); 
		tree.printPreorder(); 

		System.out.println("\nInorder traversal of binary tree is "); 
		tree.printInorder(); 

		System.out.println("\nPostorder traversal of binary tree is "); 
		tree.printPostorder(); 
	} 
} 
