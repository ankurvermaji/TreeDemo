package tree;


//Java program to see if two trees are identical 

//A binary tree Node14 
class Node14 
{ 
	int data; 
	Node14 left, right; 

	Node14(int item) 
	{ 
		data = item; 
		left = right = null; 
	} 
} 

class TreeDemo4 
{ 
	Node14 root1, root2; 

	/* Given two trees, return true if they are 
	structurally identical */
	boolean identicalTrees(Node14 a, Node14 b) 
	{ 
		/*1. both empty */
		if (a == null && b == null) 
			return true; 
			
		/* 2. both non-empty -> compare them */
	/*	if (a != null && b != null) 
			return (a.data == b.data 
					&& identicalTrees(a.left, b.left) 
					&& identicalTrees(a.right, b.right)); */

		if(a !=null && b!=null)
			return (a.data == b.data && identicalTrees(a.left,b.left)&& identicalTrees(a.right,b.right));
		/* 3. one empty, one not -> false */ 
		return false; 
	} 

	/* Driver program to test identicalTrees() function */
	public static void main(String[] args) 
	{ 
		TreeDemo4 tree = new TreeDemo4(); 

		tree.root1 = new Node14(1); 
		tree.root1.left = new Node14(2); 
		tree.root1.right = new Node14(3); 
		tree.root1.left.left = new Node14(4); 
		tree.root1.left.right = new Node14(5); 

		tree.root2 = new Node14(1); 
		tree.root2.left = new Node14(2); 
		tree.root2.right = new Node14(3); 
		tree.root2.left.left = new Node14(4); 
		tree.root2.left.right = new Node14(5); 

		if (tree.identicalTrees(tree.root1, tree.root2)) 
			System.out.println("Both trees are identical"); 
		else
			System.out.println("Trees are not identical"); 

	} 
} 
